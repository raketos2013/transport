// <auto-generated />
using System;
using FileManager.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FileManager.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("TaskOperationSequence");

            modelBuilder.Entity("FileManager.Core.Entities.AddresseeEntity", b =>
                {
                    b.Property<string>("PersonalNumber")
                        .HasColumnType("text");

                    b.Property<int>("AddresseeGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Fio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("StructuralUnit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PersonalNumber", "AddresseeGroupId");

                    b.HasIndex("AddresseeGroupId");

                    b.ToTable("Addressee");
                });

            modelBuilder.Entity("FileManager.Core.Entities.AddresseeGroupEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AddresseeGroup");
                });

            modelBuilder.Entity("FileManager.Core.Entities.ClientLogEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Values")
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.ToTable("ClientLog");
                });

            modelBuilder.Entity("FileManager.Core.Entities.TaskEntity", b =>
                {
                    b.Property<string>("TaskId")
                        .HasColumnType("text");

                    b.Property<int?>("AddresseeGroupId")
                        .HasColumnType("integer");

                    b.Property<int>("DayActive")
                        .HasColumnType("integer");

                    b.Property<int>("ExecutionLeft")
                        .HasColumnType("integer");

                    b.Property<int>("ExecutionLimit")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProgress")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TaskGroupEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("TaskGroupId")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("TimeBegin")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("TimeEnd")
                        .HasColumnType("time without time zone");

                    b.HasKey("TaskId");

                    b.HasIndex("TaskGroupEntityId");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("FileManager.Core.Entities.TaskGroupEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TaskGroup");
                });

            modelBuilder.Entity("FileManager.Core.Entities.TaskLogEntity", b =>
                {
                    b.Property<DateTime>("DateTimeLog")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TaskId")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<int?>("OperationId")
                        .HasColumnType("integer");

                    b.Property<string>("OperationName")
                        .HasColumnType("text");

                    b.Property<int?>("ResultOperation")
                        .HasColumnType("integer");

                    b.Property<string>("ResultText")
                        .HasColumnType("text");

                    b.Property<int?>("StepId")
                        .HasColumnType("integer");

                    b.Property<int?>("StepNumber")
                        .HasColumnType("integer");

                    b.HasKey("DateTimeLog", "TaskId");

                    b.ToTable("TaskLog");
                });

            modelBuilder.Entity("FileManager.Core.Entities.TaskOperation", b =>
                {
                    b.Property<int>("OperationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('\"TaskOperationSequence\"')");

                    NpgsqlPropertyBuilderExtensions.UseSequence(b.Property<int>("OperationId"));

                    b.Property<string>("AdditionalText")
                        .HasColumnType("text");

                    b.Property<int?>("AddresseeGroupId")
                        .HasColumnType("integer");

                    b.Property<bool>("InformSuccess")
                        .HasColumnType("boolean");

                    b.Property<int>("StepId")
                        .HasColumnType("integer");

                    b.HasKey("OperationId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("FileManager.Core.Entities.TaskStatusEntity", b =>
                {
                    b.Property<string>("TaskId")
                        .HasColumnType("text");

                    b.Property<int>("CountExecute")
                        .HasColumnType("integer");

                    b.Property<int?>("CountLeftFiles")
                        .HasColumnType("integer");

                    b.Property<int>("CountProcessedFiles")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateLastExecute")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsError")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProgress")
                        .HasColumnType("boolean");

                    b.HasKey("TaskId");

                    b.ToTable("TaskStatuse");
                });

            modelBuilder.Entity("FileManager.Core.Entities.TaskStepEntity", b =>
                {
                    b.Property<int>("StepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StepId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Destination")
                        .HasColumnType("text");

                    b.Property<string>("FileMask")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBreak")
                        .HasColumnType("boolean");

                    b.Property<int>("OperationId")
                        .HasColumnType("integer");

                    b.Property<int>("OperationName")
                        .HasColumnType("integer");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<int>("StepNumber")
                        .HasColumnType("integer");

                    b.Property<string>("TaskId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("StepId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskStep");
                });

            modelBuilder.Entity("FileManager.Core.Entities.UserLogEntity", b =>
                {
                    b.Property<DateTime>("DateTimeLog")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("DateTimeLog", "UserName");

                    b.ToTable("UserLog");
                });

            modelBuilder.Entity("FileManager.Core.Entities.OperationClrbufEntity", b =>
                {
                    b.HasBaseType("FileManager.Core.Entities.TaskOperation");

                    b.HasIndex("StepId");

                    b.ToTable("OperationClrbuf");
                });

            modelBuilder.Entity("FileManager.Core.Entities.OperationCopyEntity", b =>
                {
                    b.HasBaseType("FileManager.Core.Entities.TaskOperation");

                    b.Property<int>("FileAttribute")
                        .HasColumnType("integer");

                    b.Property<int>("FileInDestination")
                        .HasColumnType("integer");

                    b.Property<int>("FileInLog")
                        .HasColumnType("integer");

                    b.Property<int>("FileInSource")
                        .HasColumnType("integer");

                    b.Property<int>("FilesForProcessing")
                        .HasColumnType("integer");

                    b.Property<int>("Sort")
                        .HasColumnType("integer");

                    b.HasIndex("StepId");

                    b.ToTable("OperationCopy");
                });

            modelBuilder.Entity("FileManager.Core.Entities.OperationDeleteEntity", b =>
                {
                    b.HasBaseType("FileManager.Core.Entities.TaskOperation");

                    b.HasIndex("StepId");

                    b.ToTable("OperationDelete");
                });

            modelBuilder.Entity("FileManager.Core.Entities.OperationExistEntity", b =>
                {
                    b.HasBaseType("FileManager.Core.Entities.TaskOperation");

                    b.Property<bool>("BreakTaskAfterError")
                        .HasColumnType("boolean");

                    b.Property<int>("ExpectedResult")
                        .HasColumnType("integer");

                    b.HasIndex("StepId");

                    b.ToTable("OperationExist");
                });

            modelBuilder.Entity("FileManager.Core.Entities.OperationMoveEntity", b =>
                {
                    b.HasBaseType("FileManager.Core.Entities.TaskOperation");

                    b.Property<int>("FileAttribute")
                        .HasColumnType("integer");

                    b.Property<int>("FileInDestination")
                        .HasColumnType("integer");

                    b.Property<int>("FileInLog")
                        .HasColumnType("integer");

                    b.Property<int>("FilesForProcessing")
                        .HasColumnType("integer");

                    b.Property<int>("Sort")
                        .HasColumnType("integer");

                    b.HasIndex("StepId");

                    b.ToTable("OperationMove");
                });

            modelBuilder.Entity("FileManager.Core.Entities.OperationReadEntity", b =>
                {
                    b.HasBaseType("FileManager.Core.Entities.TaskOperation");

                    b.Property<bool>("BreakTaskAfterError")
                        .HasColumnType("boolean");

                    b.Property<int>("Encode")
                        .HasColumnType("integer");

                    b.Property<int>("ExpectedResult")
                        .HasColumnType("integer");

                    b.Property<int>("FileInSource")
                        .HasColumnType("integer");

                    b.Property<string>("FindString")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("SearchRegex")
                        .HasColumnType("boolean");

                    b.HasIndex("StepId");

                    b.ToTable("OperationRead");
                });

            modelBuilder.Entity("FileManager.Core.Entities.OperationRenameEntity", b =>
                {
                    b.HasBaseType("FileManager.Core.Entities.TaskOperation");

                    b.Property<string>("NewPattern")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OldPattern")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("StepId");

                    b.ToTable("OperationRename");
                });

            modelBuilder.Entity("FileManager.Core.Entities.AddresseeEntity", b =>
                {
                    b.HasOne("FileManager.Core.Entities.AddresseeGroupEntity", "AddresseeGroup")
                        .WithMany()
                        .HasForeignKey("AddresseeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddresseeGroup");
                });

            modelBuilder.Entity("FileManager.Core.Entities.TaskEntity", b =>
                {
                    b.HasOne("FileManager.Core.Entities.TaskGroupEntity", null)
                        .WithMany("Tasks")
                        .HasForeignKey("TaskGroupEntityId");
                });

            modelBuilder.Entity("FileManager.Core.Entities.TaskStatusEntity", b =>
                {
                    b.HasOne("FileManager.Core.Entities.TaskEntity", "Task")
                        .WithOne("TaskStatus")
                        .HasForeignKey("FileManager.Core.Entities.TaskStatusEntity", "TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("FileManager.Core.Entities.TaskStepEntity", b =>
                {
                    b.HasOne("FileManager.Core.Entities.TaskEntity", "Task")
                        .WithMany("Steps")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("FileManager.Core.Entities.OperationClrbufEntity", b =>
                {
                    b.HasOne("FileManager.Core.Entities.TaskStepEntity", "Step")
                        .WithMany()
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Step");
                });

            modelBuilder.Entity("FileManager.Core.Entities.OperationCopyEntity", b =>
                {
                    b.HasOne("FileManager.Core.Entities.TaskStepEntity", "Step")
                        .WithMany()
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Step");
                });

            modelBuilder.Entity("FileManager.Core.Entities.OperationDeleteEntity", b =>
                {
                    b.HasOne("FileManager.Core.Entities.TaskStepEntity", "Step")
                        .WithMany()
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Step");
                });

            modelBuilder.Entity("FileManager.Core.Entities.OperationExistEntity", b =>
                {
                    b.HasOne("FileManager.Core.Entities.TaskStepEntity", "Step")
                        .WithMany()
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Step");
                });

            modelBuilder.Entity("FileManager.Core.Entities.OperationMoveEntity", b =>
                {
                    b.HasOne("FileManager.Core.Entities.TaskStepEntity", "Step")
                        .WithMany()
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Step");
                });

            modelBuilder.Entity("FileManager.Core.Entities.OperationReadEntity", b =>
                {
                    b.HasOne("FileManager.Core.Entities.TaskStepEntity", "Step")
                        .WithMany()
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Step");
                });

            modelBuilder.Entity("FileManager.Core.Entities.OperationRenameEntity", b =>
                {
                    b.HasOne("FileManager.Core.Entities.TaskStepEntity", "Step")
                        .WithMany()
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Step");
                });

            modelBuilder.Entity("FileManager.Core.Entities.TaskEntity", b =>
                {
                    b.Navigation("Steps");

                    b.Navigation("TaskStatus");
                });

            modelBuilder.Entity("FileManager.Core.Entities.TaskGroupEntity", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
