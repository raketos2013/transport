// <auto-generated />
using System;
using FileManager.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FileManager.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FileManager.Domain.Entity.ClientLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Values")
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.ToTable("ClientLogs");
                });

            modelBuilder.Entity("FileManager.Domain.Entity.MailGroups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MailGroups");
                });

            modelBuilder.Entity("FileManager.Domain.Entity.MailList", b =>
                {
                    b.Property<int>("MailGroupsId")
                        .HasColumnType("integer");

                    b.Property<string>("EMail")
                        .HasColumnType("text");

                    b.HasKey("MailGroupsId", "EMail");

                    b.ToTable("MailLists");
                });

            modelBuilder.Entity("FileManager.Domain.Entity.TaskEntity", b =>
                {
                    b.Property<string>("TaskId")
                        .HasColumnType("text");

                    b.Property<string>("ArchiveCatalog")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BadArchiveCatalog")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DayActive")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("Delay")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("DelayBeforeExecuting")
                        .HasColumnType("time without time zone");

                    b.Property<bool>("DublNameJr")
                        .HasColumnType("boolean");

                    b.Property<string>("FileMask")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Group")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleteSource")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRegex")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MaxAmountFiles")
                        .HasColumnType("integer");

                    b.Property<bool>("MoveToTmp")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceCatalog")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("SplitFiles")
                        .HasColumnType("boolean");

                    b.Property<string>("SubMask")
                        .HasColumnType("text");

                    b.Property<int>("TaskGroup")
                        .HasColumnType("integer");

                    b.Property<int?>("TaskGroupEntityId")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("TimeBegin")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("TimeEnd")
                        .HasColumnType("time without time zone");

                    b.Property<string>("TmpCatalog")
                        .HasColumnType("text");

                    b.Property<string>("ValueParameterOfSplit")
                        .HasColumnType("text");

                    b.HasKey("TaskId");

                    b.HasIndex("TaskGroupEntityId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("FileManager.Domain.Entity.TaskGroupEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TaskGroups");
                });

            modelBuilder.Entity("FileManager.Domain.Entity.TaskOperationEntity", b =>
                {
                    b.Property<string>("OperationId")
                        .HasColumnType("text");

                    b.Property<string>("TaskId")
                        .HasColumnType("text");

                    b.Property<string>("AdditionalText")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DestinationDirectory")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DublDest")
                        .HasColumnType("integer");

                    b.Property<bool>("DublNameJr")
                        .HasColumnType("boolean");

                    b.Property<int?>("Group")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRename")
                        .HasColumnType("boolean");

                    b.Property<string>("NewTemplateFileName")
                        .HasColumnType("text");

                    b.Property<string>("TemplateFileName")
                        .HasColumnType("text");

                    b.HasKey("OperationId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskOperations");
                });

            modelBuilder.Entity("FileManager.Domain.Entity.TaskStatusEntity", b =>
                {
                    b.Property<string>("TaskId")
                        .HasColumnType("text");

                    b.Property<int>("CountExecute")
                        .HasColumnType("integer");

                    b.Property<int?>("CountLeftFiles")
                        .HasColumnType("integer");

                    b.Property<int>("CountProcessedFiles")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateLastExecute")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsError")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProgress")
                        .HasColumnType("boolean");

                    b.HasKey("TaskId");

                    b.ToTable("TaskStatuses");
                });

            modelBuilder.Entity("FileManager.Domain.Entity.TransportTaskLogEntity", b =>
                {
                    b.Property<DateTime>("DateTimeLog")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TaskId")
                        .HasColumnType("text");

                    b.Property<string>("OperationId")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ResultOperation")
                        .HasColumnType("integer");

                    b.Property<string>("ResultText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DateTimeLog", "TaskId", "OperationId");

                    b.ToTable("TransportTaskLogs");
                });

            modelBuilder.Entity("FileManager.Domain.Entity.UserLogEntity", b =>
                {
                    b.Property<DateTime>("DateTimeLog")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("DateTimeLog", "UserName");

                    b.ToTable("UserLogs");
                });

            modelBuilder.Entity("FileManager.Domain.Entity.MailList", b =>
                {
                    b.HasOne("FileManager.Domain.Entity.MailGroups", "MailGroups")
                        .WithMany()
                        .HasForeignKey("MailGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MailGroups");
                });

            modelBuilder.Entity("FileManager.Domain.Entity.TaskEntity", b =>
                {
                    b.HasOne("FileManager.Domain.Entity.TaskGroupEntity", null)
                        .WithMany("Tasks")
                        .HasForeignKey("TaskGroupEntityId");
                });

            modelBuilder.Entity("FileManager.Domain.Entity.TaskOperationEntity", b =>
                {
                    b.HasOne("FileManager.Domain.Entity.TaskEntity", "Task")
                        .WithMany("Operations")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("FileManager.Domain.Entity.TaskStatusEntity", b =>
                {
                    b.HasOne("FileManager.Domain.Entity.TaskEntity", "Task")
                        .WithOne("TaskStatus")
                        .HasForeignKey("FileManager.Domain.Entity.TaskStatusEntity", "TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("FileManager.Domain.Entity.TaskEntity", b =>
                {
                    b.Navigation("Operations");

                    b.Navigation("TaskStatus");
                });

            modelBuilder.Entity("FileManager.Domain.Entity.TaskGroupEntity", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
